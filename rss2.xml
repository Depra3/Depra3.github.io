<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Depra3&#39;s Learning</title>
    <link>https://Depra3.github.io/</link>
    
    <atom:link href="https://depra3.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발자가 되고 싶습니다.</description>
    <pubDate>Tue, 15 Aug 2023 11:19:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JAVA - 패키지 와 import</title>
      <link>https://depra3.github.io/2023/08/14/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/</link>
      <guid>https://depra3.github.io/2023/08/14/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/</guid>
      <pubDate>Mon, 14 Aug 2023 11:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;패키지&quot;&gt;&lt;a href=&quot;#패키지&quot; class=&quot;headerlink&quot; title=&quot;패키지&quot;&gt;&lt;/a&gt;패키지&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;클래스를 구분, 체계적으로 관리하기 위한 폴더&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;우리가 사용</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="패키지"><a href="#패키지" class="headerlink" title="패키지"></a>패키지</h1><ul><li><strong>클래스를 구분, 체계적으로 관리하기 위한 폴더</strong><ul><li><p>우리가 사용하는 <strong>eclipse 프로그램에서 볼 수 있는 패키지의 위치</strong></p><p>  <img src="/Images/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/Untitled.png"></p></li><li><p><strong>클래스를 생성하면 보이는 패키지 선언 방식</strong></p><p>  <img src="/Images/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/Untitled%201.png"></p></li></ul></li></ul><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li><strong>하나의 소스 파일에는 첫 번째 문장으로 단 한 번의 패키지 선언만을 허용</strong>한다.</li><li><strong>모든 클래스는 하나의 패키지에 속해야 한다.</strong></li><li><strong>물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리</strong>다.</li><li><strong>점(.)을 구분자로 하여 계층 구조로 구성</strong>할 수 있다.<ul><li><strong>ex) java.lang 패키지에서 lang은 java의 하위 패키지</strong>다.</li></ul></li><li><strong>클래스와 인터페이스를 포함할 수 있으며, 관련 클래스 및 인터페이스들끼리 그룹 단위로 묶을 수 있다.</strong></li></ul><h1 id="패키지-이름-짓는-규칙"><a href="#패키지-이름-짓는-규칙" class="headerlink" title="패키지 이름 짓는 규칙"></a>패키지 이름 짓는 규칙</h1><ul><li><strong>숫자로 시작 금지</strong></li><li><strong>‘_’ 와 ‘$’ 를 제외한 특수 문자 사용 금지</strong></li><li><strong>자바 표준 API에서 사용하는 java로 시작하는 패키지 이름 금지</strong></li><li><strong>String, int 등 자바 예약어 금지</strong><ul><li><strong>예약어 : <a href="https://depra3.github.io/2023/06/26/2023/06/JAVA-%EC%98%88%EC%95%BD%EC%96%B4/">Depra3’s JAVA - 예약어</a></strong></li></ul></li><li><strong>모두 소문자로 작성하는 것이 관례</strong></li></ul><hr><h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><ul><li><p><strong>컴파일러에게 클래스가 속한 패키지를 알려준다.</strong></p></li><li><p><strong>클래스를 사용할 때, 패키지 명을 생략하여 사용이 가능</strong>하다.</p><p>  <img src="/Images/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/Untitled%202.png"></p></li><li><p><strong>다른 패키지 안의 클래스를 사용하기 위해</strong>서 <strong>해당 클래스 이름 앞에 패키지명과 (.)을 붙여야한다.</strong></p><p>  <img src="/Images/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/Untitled%203.png"></p></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>선언 방식</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 패키지명.클래스명;</span><br><span class="line"><span class="keyword">import</span> 패키지명.*;       <span class="comment">// * 로 생략이 가능하다. ( * 는 모든 클래스 포함을 의미 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//       ↓ ↓ ↓</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// util 패키지 아래의 클래스 사용 빈도가 높은 경우 *을 이용해 한 줄로 사용 가능하다.</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 가 모든 클래스를 의미하기 때문에 util 패키지가 포함되지 않는다.</span></span><br><span class="line"><span class="keyword">import</span> java.*;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%8C%A8%ED%82%A4%EC%A7%80/">패키지</category>
      
      <category domain="https://Depra3.github.io/tags/import/">import</category>
      
      
      <comments>https://depra3.github.io/2023/08/14/2023/08/JAVA-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%99%80import/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - final - ②</title>
      <link>https://depra3.github.io/2023/08/11/2023/08/JAVA-final-%E2%91%A1/</link>
      <guid>https://depra3.github.io/2023/08/11/2023/08/JAVA-final-%E2%91%A1/</guid>
      <pubDate>Fri, 11 Aug 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;&lt;strong&gt;final&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;사전적 의미로 ‘결정적인’, ‘마지막</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h1><blockquote><p><strong>사전적 의미로 ‘결정적인’, ‘마지막의’로 쓰인다.<br>자바에서는 사전적 의미와 같이 초기값이 결정되면 최종 결정이 되어 더 이상 값을 수정할 수 없다.</strong></p></blockquote><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a><strong>특징</strong></h1><ul><li><strong>변수, 메소드, 클래스, 객체, 인자값에 사용이 가능하다.</strong></li><li><strong>변수에 사용하면 재할당이 불가능하여 수정이 불가능하다.</strong></li><li><strong>메소드에 사용하면 메소드 오버라이딩이 불가능하다.</strong></li><li><strong>클래스에 사용하면 해당 클래스는 상속할 수 없다. 따라서, 자식 클래스를 만들지 못 한다.</strong></li><li><strong>메소드의 인자값에 사용하면 해당 인자값은 수정할 수 없다.</strong></li><li><strong>객체 생성에 사용하면 해당 객체는 같은 타입으로 재생성이 불가능하다.<br>그러나 객체 내부 변수는 수정이 가능하다.</strong></li></ul><h1 id="사용-목적"><a href="#사용-목적" class="headerlink" title="사용 목적"></a><strong>사용 목적</strong></h1><ul><li><strong>변하지 말아야하는 싶은 변수, 메소드, 클래스, 인자값이 있다면 final을 사용하여 코딩 시에 예상치 못한 수정이 되거나 하는 상황 없이 마음 편안하게 코딩할 수 있다</strong></li></ul><hr><h1 id="final-클래스"><a href="#final-클래스" class="headerlink" title="final 클래스"></a>final 클래스</h1><blockquote><p><strong>final 클래스는 상속할 수 없는 클래스</strong>다.<br><strong>Setter를 이용해 클래스 필드를 재할당</strong> 할 수 있다.</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">접근제어자 <span class="keyword">final</span> class 클래스명 &#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter / setter</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(String a)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.show();</span><br><span class="line"></span><br><span class="line">t1.setA(<span class="string">&quot;Depra&quot;</span>);</span><br><span class="line">t1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled.png"></p></li></ul><h2 id="※-오류-발생-※"><a href="#※-오류-발생-※" class="headerlink" title="※ 오류 발생 ※"></a><strong>※ 오류 발생 ※</strong></h2><ul><li><strong>final 클래스는 상속할 수 없는 클래스이기에 상속 시에 에러 발생</strong></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Depra3 = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">t1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>에러 발생 위치</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%201.png"></p></li></ul></li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%202.png"></p></li></ul><hr><h1 id="final-객체"><a href="#final-객체" class="headerlink" title="final 객체"></a>final 객체</h1><blockquote><p><strong>객체 생성에 사용하면 해당 객체는 같은 타입으로 재생성이 불가능하다.<br>그러나 객체 내부 변수는 수정이 가능하다.</strong></p></blockquote><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 클래스명 객체명 = <span class="keyword">new</span> 클래스명(); </span><br></pre></td></tr></table></figure></li></ul><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%203.png"></p></li></ul><h2 id="※-오류-발생-※-1"><a href="#※-오류-발생-※-1" class="headerlink" title="※ 오류 발생 ※"></a><strong>※ 오류 발생 ※</strong></h2><ul><li><strong>객체 생성에 사용하면 해당 객체는 같은 타입으로 재생성이 불가능하여 재할당을 하면 에러가 발생한다.</strong></li></ul><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>에러 발생 위치</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%204.png"></p></li></ul></li></ul><h1 id="-9"><a href="#-9" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%205.png"></p></li></ul><hr><h1 id="메소드-인자값에-final-사용"><a href="#메소드-인자값에-final-사용" class="headerlink" title="메소드 인자값에 final 사용"></a>메소드 인자값에 final 사용</h1><blockquote><p><strong>인자값에 final을 사용하면 final 인자값의 수정은 불가능</strong>하다.</p></blockquote><h1 id="-10"><a href="#-10" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">접근제어자 리턴타입 메소드명(<span class="keyword">final</span> 자료형 변수명)&#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="keyword">final</span> String a)</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.show(<span class="string">&quot;Depra3&#x27;s result&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%206.png"></p></li></ul><h2 id="※-오류-발생-※-2"><a href="#※-오류-발생-※-2" class="headerlink" title="※ 오류 발생 ※"></a><strong>※ 오류 발생 ※</strong></h2><ul><li><strong>받은 인자값을 수정하려 하면 오류 발생</strong></li></ul><h1 id="-12"><a href="#-12" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="keyword">final</span> String a)</span> &#123;</span><br><span class="line">a = <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.show(<span class="string">&quot;Depra3&#x27;s result&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>오류 발생 위치</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%207.png"></p></li></ul></li></ul><h1 id="-13"><a href="#-13" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A1/Untitled%208.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/">클래스</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/Error/">Error</category>
      
      <category domain="https://Depra3.github.io/tags/final/">final</category>
      
      
      <comments>https://depra3.github.io/2023/08/11/2023/08/JAVA-final-%E2%91%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - final - ①</title>
      <link>https://depra3.github.io/2023/08/10/2023/08/JAVA-final-%E2%91%A0/</link>
      <guid>https://depra3.github.io/2023/08/10/2023/08/JAVA-final-%E2%91%A0/</guid>
      <pubDate>Thu, 10 Aug 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;&lt;strong&gt;final&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;사전적 의미로 ‘결정적인’, ‘마지막</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h1><blockquote><p><strong>사전적 의미로 ‘결정적인’, ‘마지막의’로 쓰인다.</strong><br><strong>자바에서는 사전적 의미와 같이 초기값이 결정되면 최종 결정이 되어 더 이상 값을 수정할 수 없다.</strong></p></blockquote><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a><strong>특징</strong></h1><ul><li><strong>변수, 메소드, 클래스, 객체에 사용이 가능하다.</strong></li><li><strong>변수에 사용하면 재할당이 불가능하여 수정이 불가능하다.</strong></li><li><strong>메소드에 사용하면 메소드 오버라이딩이 불가능하다.</strong></li><li><strong>클래스에 사용하면 해당 클래스는 상속할 수 없다. 따라서, 자식 클래스를 만들지 못 한다.</strong></li><li><strong>객체 생성에 사용하면 해당 객체는 같은 타입으로 재생성이 불가능하다.<br>그러나 객체 내부 변수는 수정이 가능하다.</strong></li></ul><h1 id="사용-목적"><a href="#사용-목적" class="headerlink" title="사용 목적"></a><strong>사용 목적</strong></h1><ul><li><strong>변하지 말아야하는 싶은 변수, 메소드, 클래스가 있다면 final을 사용하여 코딩 시에 예상치 못한 수정이 되거나 하는 상황 없이 마음 편안하게 코딩할 수 있다.</strong></li></ul><hr><h1 id="final-변수"><a href="#final-변수" class="headerlink" title="final 변수"></a><strong>final 변수</strong></h1><blockquote><p><strong>변수를 고정값으로 선언할 때 사용한다.</strong></p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 형식 ①</span></span><br><span class="line"><span class="keyword">final</span> 자료형 변수명;</span><br><span class="line">변수명 = ~~;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 형식 ②</span></span><br><span class="line"><span class="keyword">final</span> 자료형 변수명 = ~~;</span><br></pre></td></tr></table></figure></li><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A0/Untitled.png"></p></li></ul><h3 id="※-오류-발생-※"><a href="#※-오류-발생-※" class="headerlink" title="※ 오류 발생 ※"></a><strong>※ 오류 발생 ※</strong></h3><ul><li><p><strong>final 변수에 재할당 시에 오류 발생</strong></p></li><li><p><strong>코드</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A0/Untitled%201.png"></p></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A0/Untitled%202.png"></p></li></ul><hr><h1 id="final-메소드"><a href="#final-메소드" class="headerlink" title="final 메소드"></a>final 메소드</h1><blockquote><p><strong>final 메소드는 변경을 원치 않는 메소드를 선언할 때 사용</strong>한다.<br><strong>메소드 오버라이딩이 불가능하여 오버라이딩 한다면 오류가 발생</strong>한다.</p></blockquote><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">접근제어자 <span class="keyword">final</span> 리턴타입 메소드명()&#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">t11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t11.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A0/Untitled%203.png"></p></li></ul><h3 id="※-오류-발생-※-1"><a href="#※-오류-발생-※-1" class="headerlink" title="※ 오류 발생 ※"></a><strong>※ 오류 발생 ※</strong></h3><ul><li><p><strong>final 메소드에 오버라이딩 시에 오류 발생</strong></p></li><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Depra2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123; <span class="comment">// 메소드 오버라이딩 오류 발생</span></span><br><span class="line">System.out.println(<span class="string">&quot;Depra3 = &quot;</span> a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test1</span> <span class="variable">t11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">t11.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-final-%E2%91%A0/Untitled%204.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%95%84%EB%93%9C/">필드</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B3%80%EC%88%98/">변수</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/Error/">Error</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%A9%94%EC%86%8C%EB%93%9C/">메소드</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%95%A8%EC%88%98/">함수</category>
      
      <category domain="https://Depra3.github.io/tags/final/">final</category>
      
      
      <comments>https://depra3.github.io/2023/08/10/2023/08/JAVA-final-%E2%91%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - static</title>
      <link>https://depra3.github.io/2023/08/09/2023/08/JAVA-static/</link>
      <guid>https://depra3.github.io/2023/08/09/2023/08/JAVA-static/</guid>
      <pubDate>Wed, 09 Aug 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Static&quot;&gt;&lt;a href=&quot;#Static&quot; class=&quot;headerlink&quot; title=&quot;Static&quot;&gt;&lt;/a&gt;Static&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;‘정적인’, ‘고정된’ 이란 의미&lt;/strong&gt;를 가지고 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h1><blockquote><p><strong>‘정적인’, ‘고정된’ 이란 의미</strong>를 가지고 있으며 <strong>Static 키워드를 사용하여 변수와 메소드를 만들 수 있다.</strong> 이 <strong>static 변수, static 메소드</strong>를 다른 말로 <strong>정적 필드와 정적 메소드</strong>라고도 하며 합쳐서 <strong>정적 멤버</strong> 또는 <strong>클래스 멤버</strong>라고 한다.</p></blockquote><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li><strong>어떤 객체 또는 인스턴스에 소속되지 않고 클래스에 고정된 멤버</strong>이다.<br>따라서 <strong>클래스 로더가 클래스를 로딩하면 클래스와 같이 메모리 영역에 할당되어 관리</strong>된다.<br>이로 인해 <strong>클래스의 로딩이 끝나는 즉시 사용</strong>할 수 있다.</li><li><strong>동일 클래스 내에서 모든 객체(인스턴스)에서 공유하여 사용</strong>한다.</li><li><strong>클래스 당 하나만 생성</strong>되며 <strong>클래스 멤버</strong>라고도 부른다.</li><li><strong>static 메소드 안에서 static 멤버들만 사용 가능</strong>하다.</li></ul><h1 id="사용-목적"><a href="#사용-목적" class="headerlink" title="사용 목적"></a>사용 목적</h1><ul><li><strong>모든 클래스에서 호출이 가능한 전역변수 또는 전역함수를 만들어서 사용</strong>하기 위함</li><li><strong>static 변수</strong>는 <strong>동일 클래스 내에서 모든 객체(인스턴스)에서 공유가 가능하여 필요할 때 사용</strong>한다.</li></ul><h1 id="Static-정적-멤버-선언"><a href="#Static-정적-멤버-선언" class="headerlink" title="Static(정적) 멤버 선언"></a>Static(정적) 멤버 선언</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정적 필드 선언</span></span><br><span class="line"><span class="keyword">static</span> 자료형 변수명;</span><br><span class="line"><span class="keyword">static</span> 자료형 변수명 = ~~;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정적 메소드 선언</span></span><br><span class="line">접근제어자 <span class="keyword">static</span> 자료형 리턴타입 메소드명()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 예시</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sta_field</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 정적 필드 선언</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sta_method</span><span class="params">()</span>&#123;&#125; <span class="comment">// 정적 메소드 선언</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>사용 예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sta_field1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">sta_field2</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(Test.sta_field1);</span><br><span class="line"></span><br><span class="line"><span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">System.out.println(t2.sta_field2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-static/Untitled.png"></p></li></ul><h1 id="※-주의-사항-※"><a href="#※-주의-사항-※" class="headerlink" title="※ 주의 사항 ※"></a>※ 주의 사항 ※</h1><ul><li><p><strong>오류 코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sta_field1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">sta_field2</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(Test.sta_field1);</span><br><span class="line"></span><br><span class="line">System.out.println(Test.sta_field2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Test 클래스에서 변수 sta_field2는 정적 변수로 선언하지 않아 오류 발생</strong></li></ul></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-static/Untitled%201.png"></p><ul><li><strong>정적 변수는 클래스 로더가 클래스를 로딩하면 같이 메모리가 할당</strong>되기 때문에 <strong>객체 생성을 하지 않아도 사용이 가능</strong>하다.</li><li><strong>정적 변수 선언을 하지 않으면 메모리에 할당이 되지 않아 객체 생성하기 전에 호출할 수 없는 것 같다.</strong></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/Error/">Error</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A1%9C%EB%8D%94/">클래스 로더</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%95%EC%A0%81%EB%B3%80%EC%88%98/">정적변수</category>
      
      <category domain="https://Depra3.github.io/tags/static/">static</category>
      
      
      <comments>https://depra3.github.io/2023/08/09/2023/08/JAVA-static/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 접근제어자</title>
      <link>https://depra3.github.io/2023/08/07/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/</link>
      <guid>https://depra3.github.io/2023/08/07/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/</guid>
      <pubDate>Mon, 07 Aug 2023 10:40:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;접근제어자&quot;&gt;&lt;a href=&quot;#접근제어자&quot; class=&quot;headerlink&quot; title=&quot;접근제어자&quot;&gt;&lt;/a&gt;접근제어자&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;클래스 or 클래스 멤버(필드, 메소드 생성자)를 사용할 때, 접근할 수 있는 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="접근제어자"><a href="#접근제어자" class="headerlink" title="접근제어자"></a>접근제어자</h1><ul><li><strong>클래스 or 클래스 멤버(필드, 메소드 생성자)를 사용할 때, 접근할 수 있는 범위를 지정</strong>하는 역할</li><li><strong>생략이 가능하며, 생략할 때는 자동적으로 default로 설정</strong>된다.</li></ul><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li><strong>접근을 제어하여 외부에 의한 접근으로부터 데이터를 보호</strong>한다.</li><li><strong>객체지향 프로그래밍</strong>에서 <strong>캡슐화하기 위한 기능으로 사용</strong>된다.</li></ul><hr><h1 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h1><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><blockquote><p><strong>접근 제한이 없어 모든 접근이 가능</strong><br><strong>클래스, 클래스 멤버 모두 사용</strong></p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>()&#123;        <span class="comment">// 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> a;       <span class="comment">// 클래스 멤버</span></span><br><span class="line"><span class="keyword">public</span> String b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><blockquote><p><strong>같은 패키지 내의 모든 클래스, 다른 패키지의 자식 클래스에서 접근 가능</strong><br><strong>클래스 멤버만 사용</strong></p></blockquote><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>()&#123;        <span class="comment">// 클래스</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> a;    <span class="comment">// 클래스 멤버</span></span><br><span class="line"><span class="keyword">protected</span> String b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><blockquote><p><strong>같은 패키지 내에서만 접근 가능</strong><br><strong>클래스, 클래스 멤버 모두 생략해서 사용</strong></p></blockquote><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>()&#123;        <span class="comment">// 클래스</span></span><br><span class="line"><span class="type">int</span> a;       <span class="comment">// 클래스 멤버</span></span><br><span class="line">String b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><blockquote><p><strong>같은 클래스 내에서만 접근 가능</strong><br><strong>클래스 멤버만 사용</strong></p></blockquote><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>()&#123;        <span class="comment">// 클래스</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> a;      <span class="comment">// 클래스 멤버</span></span><br><span class="line"><span class="keyword">private</span> String b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="접근-범위"><a href="#접근-범위" class="headerlink" title="접근 범위"></a>접근 범위</h1><ul><li><strong>접근 범위 : public &gt; protected &gt; default &gt; private</strong></li></ul><p><img src="/Images/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/Untitled.png"></p>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90/">접근 제어자</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%91%EA%B7%BC-%EC%A0%9C%ED%95%9C%EC%9E%90/">접근 제한자</category>
      
      <category domain="https://Depra3.github.io/tags/public/">public</category>
      
      <category domain="https://Depra3.github.io/tags/protected/">protected</category>
      
      <category domain="https://Depra3.github.io/tags/default/">default</category>
      
      <category domain="https://Depra3.github.io/tags/private/">private</category>
      
      
      <comments>https://depra3.github.io/2023/08/07/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 메소드</title>
      <link>https://depra3.github.io/2023/08/04/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/</link>
      <guid>https://depra3.github.io/2023/08/04/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/</guid>
      <pubDate>Fri, 04 Aug 2023 12:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;메소드&quot;&gt;&lt;a href=&quot;#메소드&quot; class=&quot;headerlink&quot; title=&quot;메소드&quot;&gt;&lt;/a&gt;메소드&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멤버 함수 (member function)&lt;/strong&gt; 라고도 하며 객체 지향 프로그래밍에</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h1><ul><li><strong>멤버 함수 (member function)</strong> 라고도 하며 객체 지향 프로그래밍에서 객체와 관련된 서브 루틴 ( 또는 함수) 이자 클래스가 갖고 있는 기능이다.</li><li><strong>데이터와 멤버 변수에 대한 접근 권한을 갖는다.</strong></li></ul><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li><strong>메소드의 이름은 생성자와는 다르게 임의로 지정</strong>할 수 있다.</li><li><strong>하나의 클래스가 여러 개의 메소드를 가질 수 있다.</strong><ul><li><strong>메소드 오버로딩을 이용하여 중복된 메소드명을 가진 메소드들을 가질 수 있다.</strong></li></ul></li></ul><h1 id="사용-목적"><a href="#사용-목적" class="headerlink" title="사용 목적"></a>사용 목적</h1><ul><li><strong>중복되는 코드 사용을 줄여 반복적인 프로그래밍을 피할 수 있다.</strong></li><li>모듈화로 인해 <strong>코드 가독성이 향상</strong>된다.</li><li>모듈화로 인해 <strong>유지 보수가 수월</strong>해진다.</li></ul><h3 id="기본-구조"><a href="#기본-구조" class="headerlink" title="기본 구조"></a>기본 구조</h3><ul><li><strong>매개 변수 : 메소드에 전달된 입력 값을 저장하는 변수</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">접근제어자 리턴타입(String, <span class="type">int</span>, ...) 메소드명(자료형 매개변수①, 자료형 매개변수②, ...)&#123;</span><br><span class="line">~~</span><br><span class="line">~~</span><br><span class="line"><span class="keyword">return</span> 리턴 값; <span class="comment">// 단, 리턴타입이 void인 경우 return은 사용할 필요가 없다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>접근제어자 : <a href="https://depra3.github.io/2023/08/07/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/">Depra3’s JAVA - 접근제어자</a></strong></li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr><h1 id="메소드-종류"><a href="#메소드-종류" class="headerlink" title="메소드 종류"></a>메소드 종류</h1><h2 id="①-입력과-출력이-있는-메소드"><a href="#①-입력과-출력이-있는-메소드" class="headerlink" title="① 입력과 출력이 있는 메소드"></a>① 입력과 출력이 있는 메소드</h2><blockquote><p><strong>매개 변수 a, b를 입력</strong> 받아 <strong>int형  a+b값을 return</strong>한다.</p></blockquote><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> test.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a와 b의 합 : &quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/Untitled.png"></p></li></ul><hr><h2 id="②-입력이-있지만-출력은-없는-메소드"><a href="#②-입력이-있지만-출력은-없는-메소드" class="headerlink" title="② 입력이 있지만 출력은 없는 메소드"></a>② 입력이 있지만 출력은 없는 메소드</h2><blockquote><p><strong>매개 변수 a, b를 입력</strong> 받지만 <strong>return이 없다.</strong><br> <strong>출력값이 없어 메소드 자료형을 void로 한다.</strong></p></blockquote><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a와 b의 합 : &quot;</span> + (a + b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/Untitled%201.png"></p></li></ul><hr><h2 id="③-입력이-없지만-출력이-있는-메소드"><a href="#③-입력이-없지만-출력이-있는-메소드" class="headerlink" title="③ 입력이 없지만 출력이 있는 메소드"></a>③ 입력이 없지만 출력이 있는 메소드</h2><blockquote><p><strong>입력 받는 매개 변수가 없으나 String형 return값인 world을 출력</strong>한다.</p></blockquote><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;world&quot;</span>; <span class="comment">// 리턴 값이 문자열이기 때문에 String 리턴 타입을 사용</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> test.hello();</span><br><span class="line">System.out.println(re);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/Untitled%202.png"></p></li></ul><hr><h2 id="④-입력과-출력이-없는-메소드"><a href="#④-입력과-출력이-없는-메소드" class="headerlink" title="④ 입력과 출력이 없는 메소드"></a>④ 입력과 출력이 없는 메소드</h2><blockquote><p><strong>입력 값과 출력값이 없다.</strong><br><strong>출력값이 없어 메소드 자료형을 void로 한다.</strong></p></blockquote><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test.hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/Untitled%203.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%A9%94%EC%86%8C%EB%93%9C/">메소드</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/">메소드 오버로딩</category>
      
      
      <comments>https://depra3.github.io/2023/08/04/2023/08/JAVA-%EB%A9%94%EC%86%8C%EB%93%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 생성자</title>
      <link>https://depra3.github.io/2023/08/02/2023/08/JAVA-%EC%83%9D%EC%84%B1%EC%9E%90/</link>
      <guid>https://depra3.github.io/2023/08/02/2023/08/JAVA-%EC%83%9D%EC%84%B1%EC%9E%90/</guid>
      <pubDate>Wed, 02 Aug 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;생성자&quot;&gt;&lt;a href=&quot;#생성자&quot; class=&quot;headerlink&quot; title=&quot;생성자&quot;&gt;&lt;/a&gt;생성자&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;객체가 생성될 때 자동으로 호출&lt;/strong&gt;되어 &lt;strong&gt;인스턴스 변수를 지정한 값으</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h1><ul><li><strong>객체가 생성될 때 자동으로 호출</strong>되어 <strong>인스턴스 변수를 지정한 값으로 초기화하는 메소드<br>즉, 인스턴스 초기화 메소드이다.</strong></li></ul><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li><strong>생성자의 이름은 클래스의 이름과 동일</strong>해야 한다.</li><li><strong>클래스 내에서 선언</strong>되며 <strong>리턴 값이 없고 상속되지 않는다.</strong><ul><li><strong>리턴 값이 없다고 반환 타입 void를 선언하지 않는다.</strong></li></ul></li><li><strong>하나의 클래스가 여러개의 생성자를 가질 수 있다.</strong><ul><li><strong>생성자도 메소드이므로 메소드 오버로딩이 가능</strong></li></ul></li></ul><hr><h2 id="기본-생성자와-매개-변수가-있는-생성자"><a href="#기본-생성자와-매개-변수가-있는-생성자" class="headerlink" title="기본 생성자와 매개 변수가 있는 생성자"></a>기본 생성자와 매개 변수가 있는 생성자</h2><ul><li><strong>하나의 클래스에는 반드시 하나 이상의 생성자가 존재</strong>해야 한다.<ul><li><strong>코드 작성자가 생성자를 구현하지 않을 경우</strong>에는 <strong>컴파일러가 자동으로 생성자 코드를 넣는다.</strong></li></ul></li><li><strong>생성자 오버로딩이 가능하여 여러 개의 생성자를 사용할 수 있다.</strong></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">접근제어자 class 클래스명 &#123;</span><br><span class="line">자료형(String, <span class="type">int</span>, ...) 변수명;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 생성자 - 생략 가능</span></span><br><span class="line">접근제어자 클래스명() &#123; &#125; </span><br><span class="line"><span class="comment">// 매개 변수가 있는 생성자 - 생략 불가능</span></span><br><span class="line">접근제어자 클래스명(자료형 매개변수①, 자료형 매개변수②, ...) &#123;</span><br><span class="line">~~~</span><br><span class="line">~~~</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">접근제어자 리턴타입(String, <span class="type">int</span>, ...) 메소드명()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>접근제어자 : <a href="https://depra3.github.io/2023/08/07/2023/08/JAVA-%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%9E%90/">Depra3’s JAVA - 접근제어자</a></strong></li></ul></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">String model;</span><br><span class="line"><span class="type">int</span> speed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 필드를 직접적으로 초기화할 수도 있다.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;빨강&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 생성자</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="comment">// 생략 가능. 만들어놓지 않아도 기본은 존재.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 오버로딩</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model)</span>&#123; <span class="comment">// 매개변수가 하나인 생성자</span></span><br><span class="line"><span class="built_in">this</span>.model = model;  <span class="comment">// 입력받은 매개변수 값을 객체 변수에 입력</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 생성자 오버로딩</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model, <span class="type">int</span> speed)</span>&#123; <span class="comment">// 매개 변수가 2개인 생성자</span></span><br><span class="line"><span class="built_in">this</span>.model = model;</span><br><span class="line"><span class="built_in">this</span>.speed = speed;</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">carInfo</span><span class="params">()</span> &#123; <span class="comment">// 출력</span></span><br><span class="line">System.out.println(<span class="string">&quot;제조사 : &quot;</span> + model + <span class="string">&quot;, 속도 : &quot;</span> + speed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">carColor</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;자동차 색상 : &quot;</span> + color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();           <span class="comment">// 객체 생성 - 기본 생성자</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>);      <span class="comment">// 객체 생성 - 매개 변수 1개인 생성자</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="number">120</span>); <span class="comment">// 객체 생성 - 매개 변수 2개인 생성자</span></span><br><span class="line"></span><br><span class="line">car1.carInfo(); <span class="comment">// 기본 생성자</span></span><br><span class="line">car2.carInfo(); <span class="comment">// 매개 변수 1개인 생성자</span></span><br><span class="line">car3.carInfo(); <span class="comment">// 매개 변수 2개인 생성자</span></span><br><span class="line">car3.carColor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>실행 결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EC%83%9D%EC%84%B1%EC%9E%90/Untitled.png"></p></li></ul><hr><h1 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h1><ul><li><strong>기본 생성자는 생략할 수 있다.</strong> 그러나 <strong>기본 생성자를 정의하지 않고 다른 생성자 정의가 1개 이상이 존재하는 상태</strong>에서 <strong>기본 생성자 호출하면 다음과 같은 Error가 발생</strong>한다.</li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>코드</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">String model;</span><br><span class="line"><span class="type">int</span> speed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 필드를 직접적으로 초기화할 수도 있다.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;빨강&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 생성자</span></span><br><span class="line"><span class="comment">//public Car() &#123; </span></span><br><span class="line"><span class="comment">//// 생략 가능. 만들어놓지 않아도 기본은 존재</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 오버로딩</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model)</span>&#123; <span class="comment">// 매개변수가 하나인 생성자</span></span><br><span class="line"><span class="built_in">this</span>.model = model;  <span class="comment">// 입력받은 매개변수 값을 객체 변수에 입력</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 생성자 오버로딩</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model, <span class="type">int</span> speed)</span>&#123; <span class="comment">// 매개 변수가 2개인 생성자</span></span><br><span class="line"><span class="built_in">this</span>.model = model;</span><br><span class="line"><span class="built_in">this</span>.speed = speed;</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">carInfo</span><span class="params">()</span> &#123; <span class="comment">// 출력</span></span><br><span class="line">System.out.println(<span class="string">&quot;제조사 : &quot;</span> + model + <span class="string">&quot;, 속도 : &quot;</span> + speed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">carColor</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;자동차 색상 : &quot;</span> + color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();           <span class="comment">// 객체 생성 - 기본 생성자 ★ Error 발생 ★</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>);      <span class="comment">// 객체 생성 - 매개 변수 1개인 생성자</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="number">120</span>); <span class="comment">// 객체 생성 - 매개 변수 2개인 생성자</span></span><br><span class="line"></span><br><span class="line">car1.carInfo(); <span class="comment">// 기본 생성자</span></span><br><span class="line">car2.carInfo(); <span class="comment">// 매개 변수 1개인 생성자</span></span><br><span class="line">car3.carInfo(); <span class="comment">// 매개 변수 2개인 생성자</span></span><br><span class="line">car3.carColor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>실행 결과</strong></p><p>  <img src="/Images/2023/08/JAVA-%EC%83%9D%EC%84%B1%EC%9E%90/Untitled%201.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%83%9D%EC%84%B1%EC%9E%90/">생성자</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%83%9D%EC%84%B1%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9/">생성자 오버로딩</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90/">기본 생성자</category>
      
      <category domain="https://Depra3.github.io/tags/Error/">Error</category>
      
      
      <comments>https://depra3.github.io/2023/08/02/2023/08/JAVA-%EC%83%9D%EC%84%B1%EC%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 객체지향프로그래밍</title>
      <link>https://depra3.github.io/2023/08/01/2023/08/JAVA-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
      <guid>https://depra3.github.io/2023/08/01/2023/08/JAVA-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
      <pubDate>Tue, 01 Aug 2023 11:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;객체-지향-프로그래밍-Object-Oriented-Programming-OOP&quot;&gt;&lt;a href=&quot;#객체-지향-프로그래밍-Object-Oriented-Programming-OOP&quot; class=&quot;headerlink&quot; title=&quot;객체 지향 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="객체-지향-프로그래밍-Object-Oriented-Programming-OOP"><a href="#객체-지향-프로그래밍-Object-Oriented-Programming-OOP" class="headerlink" title="객체 지향 프로그래밍 ( Object-Oriented Programming, OOP)"></a>객체 지향 프로그래밍 ( Object-Oriented Programming, OOP)</h1><ul><li>컴퓨터 프로그래밍의 패러다임 중 하나로 <strong>실세계에 존재하는 객체</strong>를<br><strong>소프트웨어의 세계에서 표현하기 위해 객체의 핵심적인 개념 또는 기능만을<br>추출하는 추상화를 통해 객체를 만들어</strong>, 그 객체들 간의 <strong>유기적인 상호작용을 통해<br>로직을 구성하는 프로그래밍</strong>이다.</li></ul><h2 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h2><ul><li><strong>물리적으로 존재</strong>하거나 <strong>추상적으로 생각할 수 있는 것 중</strong>에서 <strong>자신과 다른 것을 식별 가능한 것</strong></li><li><strong>참고 : <a href="https://depra3.github.io/2023/07/25/2023/07/JAVA-%EA%B0%9D%EC%B2%B4/">JAVA - 객체</a></strong></li></ul><h2 id="객체-지향-프로그래밍-언어"><a href="#객체-지향-프로그래밍-언어" class="headerlink" title="객체 지향 프로그래밍 언어"></a>객체 지향 프로그래밍 언어</h2><ul><li>사용 언어 : <strong>C++, C#, Java, Python, JavaScript</strong> 등이 있다.</li><li>참고 : <a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D#%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%EC%96%B8%EC%96%B4"><strong>객체 지향 언어</strong></a></li></ul><hr><h1 id="객체-지향-프로그래밍-특징"><a href="#객체-지향-프로그래밍-특징" class="headerlink" title="객체 지향 프로그래밍 특징"></a>객체 지향 프로그래밍 특징</h1><h3 id="추상화"><a href="#추상화" class="headerlink" title="추상화"></a>추상화</h3><ul><li><strong>공통된 속성과 행위를 모아 추출하는 것</strong></li><li><strong>불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 프로그램을 간단히 만드는 것</strong></li><li><strong>공통의 속성과 행위를 찾아서 타입을 정의하는 과정</strong></li><li>예시) SUV, 세단, 버스 등의 <strong>공통된 속성과 행위</strong>를 모아 “자동차” 라는 객체를 만든다.</li></ul><h3 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h3><ul><li><strong>객체의 속성(필드) 과 행위(메서드)를 하나로 묶어내고, 실제 구현 내용은 외부에 감추는 것</strong>이다.</li><li><strong>외부에 대한 접근을 차단하여 객체가 손상되지 않도록 한다.</strong></li><li><strong>낮은 결합도를 유지</strong>할 수 있도록 설계</li><li>캡슐화 된 멤버의 노출 여부를 <strong>접근 제한으로 관리</strong>한다.</li></ul><h3 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h3><ul><li><strong>부모가 가지고 있는 기능을 자식에게 물려준다.</strong><br><strong>→ 새로운 클래스가 기존의 클래스의 자료와 연산을 이용할 수 있게 하는 기능</strong></li><li><strong>코드 재활용 가능, 유지보수 편의성 제공</strong></li></ul><h3 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h3><ul><li><strong>어떤 한 요소에 여러 개념을 넣어 놓는 것</strong>이다.</li><li><strong>객체를 부품화 할 수 있고, 유지보수가 용이</strong>하다.</li><li><strong>예시</strong><ul><li><strong>오버라이딩</strong><ul><li><strong>하위 클래스가 상위 클래스에서 만들어진 메서드를 원하는 방향으로 재정립하여 사용</strong></li></ul></li><li><strong>오버로딩</strong><ul><li><strong>같은 이름의 메서드가 인자의 개수나 자료형에 따라 다른 기능을 하는 것</strong></li></ul></li></ul></li></ul><hr><h1 id="객체-지향-프로그래밍의-장단점"><a href="#객체-지향-프로그래밍의-장단점" class="headerlink" title="객체 지향 프로그래밍의 장단점"></a>객체 지향 프로그래밍의 장단점</h1><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>클래스를 재사용하거나 상속하는 것을 통해 <strong>코드의 재사용성</strong>이 용이</li><li>클래스 단위로 모듈화 하여 업무 분담이 가능하기 때문에 <strong>생산성 향상</strong>됨</li><li>클래스 단위로 모듈화가 되어 있어 <strong>유지 보수의 용이</strong>성이 높음</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>설계에 <strong>많은 시간과 노력이 소요</strong></li><li><strong>처리 속도가 느림</strong></li><li><strong>객체 수가 많아져 용량이 커질 수 있음</strong></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">객체 지향 프로그래밍</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%BA%A1%EC%8A%90%ED%99%94/">캡슐화</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%83%81%EC%86%8D/">상속</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%8B%A4%ED%98%95%EC%84%B1/">다형성</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%B6%94%EC%83%81%ED%99%94/">추상화</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%9E%A5%EC%A0%90/">장점</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%8B%A8%EC%A0%90/">단점</category>
      
      
      <comments>https://depra3.github.io/2023/08/01/2023/08/JAVA-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정보처리 산업기사(2023) 3과목 - 1장 - ①</title>
      <link>https://depra3.github.io/2023/07/31/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/</link>
      <guid>https://depra3.github.io/2023/07/31/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/</guid>
      <pubDate>Mon, 31 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;데이터-베이스-이해&quot;&gt;&lt;a href=&quot;#데이터-베이스-이해&quot; class=&quot;headerlink&quot; title=&quot;데이터 베이스 이해&quot;&gt;&lt;/a&gt;데이터 베이스 이해&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;스택, 트리, 정렬, 데이터 베이스, 데이터 모델, E-R</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="데이터-베이스-이해"><a href="#데이터-베이스-이해" class="headerlink" title="데이터 베이스 이해"></a>데이터 베이스 이해</h1><ul><li>스택, 트리, 정렬, 데이터 베이스, 데이터 모델, E-R모델, 관계형 데이터 베이스, 키, 정규화, 뷰</li></ul><h2 id="자료-구조"><a href="#자료-구조" class="headerlink" title="자료 구조"></a>자료 구조</h2><ul><li>저장 공간의 효율성과 실행 시간의 신속성을 위한 자료 간의 관계, 처리 방법들을 연구 분석하는 것<ul><li><strong>논리적 관점</strong><ul><li>데이터 사이의 관계와 조작 방법을 기술한 추상 자료형(Abstract Data Type)으로 정의<ul><li>프로그램에서 사용되는 데이터와 해당 데이터를 조작하기 위한 함수나 연산들의 집합으로 구성</li></ul></li></ul></li><li><strong>물리적 관점</strong><ul><li>데이터가 메모리에 저장되는 방식 (접근하는 방식에 따라 다양한 자료 구조 존재)<ul><li>ex) 배열, Linked List</li></ul></li></ul></li></ul></li></ul><h2 id="자료-구조-분류"><a href="#자료-구조-분류" class="headerlink" title="자료 구조 분류"></a>자료 구조 분류</h2><ul><li><strong>선형 구조</strong><ul><li><strong>배열</strong><ul><li>동일한 자료형의 데이터들이 같은 크기로 나열되어 순서를 갖는 집합</li><li>데이터 삭제 시 메모리 낭비 발생</li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><strong>선형 리스트</strong>(Linear List) ( 연속 리스트(배열), 연결 리스트(포인터) )<ul><li>일정한 순서에 의해 나열된 자료 구조</li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><strong>연속 리스트</strong><ul><li>배열과 같이 연속되는 기억 장소에 저장되는 자료 구조</li><li>기억 장소를 연속적으로 배정 받기 때문에 기억 장소 이용 효율은 밀도가 1로서 가장 좋다.</li><li>삽입 및 삭제 시 자료의 이동이 필요</li></ul></li><li><strong>연결 리스트</strong><ul><li>자료들을 반드시 연속적으로 배열시키지는 않고 임의의 기억 공간에 기억 시키되, 자료 항목의 순서에 따라 노드의 포인터 부분을 이용하여 서로 연결 시킨 자료 구조</li><li>노드의 삽입, 삭제 작업이 용이</li><li>기억 공간이 연속적으로 놓여 있지 않아도 저장할 수 있다.</li></ul></li></ul></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><strong>스택(Stack)</strong><ul><li>리스트의 한쪽 끝으로만 자료의 삽입, 삭제 작업이 이루어지는 자료 구조</li><li>가장 나중에 삽입된 자료가 가장 먼저 삭제되는 후입선출(LIFO) 방식으로 자료를 처리</li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><strong>용도</strong><ul><li>재귀 호출, 후위 표기법, 서브루틴 호출, 인터럽트 처리, 깊이 우선 탐색 등과 같이 왔던 길을 되돌아가는 경우에 사용</li></ul></li><li>모든 기억 공간이 꽉 채워져 있는 상태에서 데이터가 삽입되면 오버플로우가 발생, 더 이상 삭제할 데이터가 없는 상태에서 데이터를 삭제하면 언더플로우가 발생</li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><strong>용어</strong><ul><li>삽입 (Push), 삭제 (Pop), 읽기 (Peek)</li><li>Bottom : 가장 밑바닥, 먼저 들어온 데이터 위치</li><li>Top : 스택의 포인터 위치 or 가장 마지막에 들어온 데이터 위치</li></ul></li></ul></li></ul><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><ul><li><strong>큐(Queue)</strong><ul><li>리스트의 한쪽에서는 삽입 작업이 이루어지고 다른 한쪽에서는 삭제 작업이 이루어지도록 구성한 자료 구조</li><li>가장 먼저 삽입된 자료가 가장 먼저 삭제되는 선입선출 (FIFO) 방식으로 처리</li><li>용어<ul><li><strong>Enqueue</strong> : 데이터 입력하는 함수</li><li><strong>Dequeue</strong> : 데이터 출력하는 함수</li><li><strong>Peek</strong> : front에 위치한 데이터를 읽음</li><li><strong>front (f)</strong> : 가장 먼저 들어온 데이터 공간</li><li><strong>rear (r)</strong> : 가장 마지막에 들어온 데이터 공간</li></ul></li></ul></li></ul><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><ul><li><p><strong>덱(Deque) ( &#x3D; 양방향 큐 )</strong></p><ul><li>삽입과 삭제가 리스트 양쪽 끝에서 모두 발생 할 수 있는 자료 구조 ( FIFO, LIFO 가능)</li><li>스택과 큐의 장점만 따서 구성</li></ul><p>  <img src="/Images/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled.png"></p></li></ul></li></ul><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><ul><li><strong>비선형 구조</strong><ul><li>**정점(Node,노드)**과 **선분(Branch,가지)**을 이용하여 사이클을 이루지 않도록 구성한 그래프의 특수한 형태<ul><li>노드 (Node) : 하나의 기억 공간</li><li>링크 (Link) : 노드와 노드 사이를 연결하는 선</li></ul></li></ul><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><ul><li><strong>용어</strong><ul><li><strong>노드 (Node)</strong><ul><li>트리를 구성하고 있는 기본 요소로서 자료 항목과 다른 항목에 대한 브랜치를 합친 것</li></ul></li><li><strong>근 노드 (Root Node)</strong><ul><li>트리 구조에서 부모가 없는 최상위 노드</li></ul></li><li><strong>디그리 (Degree)</strong><ul><li>각 노드에서 뻗어 나온 가지 수</li></ul></li><li><strong>단말 노드 (Terminal Node) &#x3D; 잎 노드 (Leaf Node)</strong><ul><li>자식이 하나도 없는 노드 ( Degree가 0인 노드)</li></ul></li><li><strong>자식 노드 (Son Node)</strong><ul><li>어떤 노드에 연결된 하위(다음) 레벨의 노드들</li></ul></li><li><strong>부모 노드 (Parent Node)</strong><ul><li>어떤 노드에 연결된 상위(이전) 레벨의 노드들</li></ul></li><li><strong>형제 노드 (Brother Node, Siblings)</strong><ul><li>동일한 부모를 갖는 노드들</li></ul></li><li><strong>트리의 디그리(degree)</strong><ul><li>노드들의 디그리 중에서 가장 많은 수</li></ul></li></ul></li></ul></li></ul><h1 id="-9"><a href="#-9" class="headerlink" title=""></a></h1><ul><li><strong>트리의 운행법</strong><ul><li><p>트리를 구성하는 각 노드들을 찾아가는 방법</p><ul><li>이진 트리를 운행하는 방법은 산술식 표기법과 연관성을 갖음</li></ul></li><li><p><strong>Preorder 운행 (전위 순회)</strong></p><ul><li><strong>Root → Left → Right</strong></li></ul><p>  <img src="/Images/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%201.png"></p><ul><li><strong>순회 경로 : A - B - D - H - I - E - J - K - C - F - L - G</strong></li></ul></li></ul><h1 id="-10"><a href="#-10" class="headerlink" title=""></a></h1><ul><li><p><strong>Inorder 운행 (중위 순회)</strong></p><ul><li><strong>Left → Root → Right</strong></li></ul><p>  <img src="/Images/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%202.png"></p></li></ul><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><ul><li><p><strong>Postorder 운행 (후위 순회)</strong></p><ul><li><strong>Left → Right → Root</strong></li></ul><p>  <img src="/Images/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%203.png"></p></li></ul></li></ul><h1 id="-12"><a href="#-12" class="headerlink" title=""></a></h1><ul><li><strong>수식의 표기법</strong><ul><li>산술식을 계산하기 위해 기억 공간에 기억시키는 방법</li><li><strong>전위 표기법 (PreFix) : 연산자 → Left → Right</strong></li><li><strong>중위 표기법(InFix) : Left → 연산자 → Right</strong></li><li><strong>후위 표기법(PostFix) : Left → Right → 연산자</strong></li></ul></li></ul><h1 id="-13"><a href="#-13" class="headerlink" title=""></a></h1><ul><li><strong>그래프(Graph)</strong><ul><li><strong>방향 그래프의 최대 간선 수 : n(n-1)</strong></li><li><strong>무방향 그래프의 최대 간선 수 : n(n-1)&#x2F;2</strong></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C/">자격증 참고 자료</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC-%EC%82%B0%EC%97%85%EA%B8%B0%EC%82%AC/">정보처리 산업기사</category>
      
      
      <comments>https://depra3.github.io/2023/07/31/2023/07/3%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정보처리 산업기사(2023) 2과목 - 2장</title>
      <link>https://depra3.github.io/2023/07/29/2023/07/2%EA%B3%BC%EB%AA%A9-2%EC%9E%A5/</link>
      <guid>https://depra3.github.io/2023/07/29/2023/07/2%EA%B3%BC%EB%AA%A9-2%EC%9E%A5/</guid>
      <pubDate>Sat, 29 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;프로그래밍-언어-활용&quot;&gt;&lt;a href=&quot;#프로그래밍-언어-활용&quot; class=&quot;headerlink&quot; title=&quot;프로그래밍 언어 활용&quot;&gt;&lt;/a&gt;프로그래밍 언어 활용&lt;/h1&gt;&lt;h2 id=&quot;2장-프로그램-구현&quot;&gt;&lt;a href=&quot;#2장-프로그램</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="프로그래밍-언어-활용"><a href="#프로그래밍-언어-활용" class="headerlink" title="프로그래밍 언어 활용"></a>프로그래밍 언어 활용</h1><h2 id="2장-프로그램-구현"><a href="#2장-프로그램-구현" class="headerlink" title="2장 프로그램 구현"></a>2장 프로그램 구현</h2><ul><li>웹 서버, 웹 애플리케이션 서버, 개발 언어 선정 기준, 프레임 워크, Spring, 제어의 역흐름, 결합도, 응집도, 재사용, API</li></ul><h1 id="모듈"><a href="#모듈" class="headerlink" title="모듈"></a>모듈</h1><ul><li><strong>개요</strong><ul><li>모듈화를 통해 분리된 시스템의 각 기능들로, 서브루틴, 서브 시스템, 소프트웨어 내의 프로그램, 작업 단위 등과 같은 의미로 사용됨</li><li>모듈의 독립성은 <strong>결합도와 응집도</strong>에 의해 측정</li><li><strong>독립성을 높이려면?</strong>  <strong>결합도 ↓, 응집도  ↑, 모듈의 크기  ↓</strong></li><li><strong>모듈의 응집도는 높고 결합도는 낮은 설계가 이상적</strong><ul><li>모듈의 내부 구조가 각 요소들이 서로 연관되어 있으면서도 모듈 간의 의존성이 적은 구조가 바람직</li></ul></li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><strong>결합도 (Coupling) [ 자 스 제 외 공 내 ]</strong><ul><li><strong>모듈 간에 상호 의존하는 정도</strong> 또는 <strong>두 모듈 사이의 연관 관계를 의미</strong>한다.</li><li><strong>결합도 ↑ → 독립성 ↓ → 의존성 ↑ → 설계의 품질 ↓</strong></li><li><strong>결합도 약  →  강 ( 결합도가 약할수록 모듈의 독립성 ↑</strong> )<ul><li><strong>자료 결합도 (Data Coupling)</strong><ul><li>다른 모듈 호출하면서 매개 변수나 인수로 데이터를 넘겨주고 처리 결과를 다시 돌려주는 방식</li></ul></li><li><strong>스탬프(검인) 결합도 (Stamp Coupling)</strong><ul><li>두 모듈이 동일한 자료 구조를 조회하는 경우의 결합도</li><li>자료 구조의 어떠한 변화, 즉 포맷이나 구조의 변화는 그것을 조회하는 모든 모듈 및 변화되는 필드를 실제로 조회하지 않는 모듈에 까지도 영향을 미친다.</li></ul></li><li><strong>제어 결합도 (Control Coupling)</strong><ul><li>한 모듈이 다른 모듈의 상세한 처리 절차를 알고 있어 이를 통제하는 경우나 처리 기능이 두 모듈에 분리되어 설계된 경우에 발생</li></ul></li><li><strong>외부 결합도 (Exernal Coupling)</strong><ul><li>어떤 모듈에서 선언한 데이터(변수)를 외부의 다른 모듈에서 참조할 때의 결합도</li></ul></li><li><strong>공통(공유) 결합도 (Common Coupling)</strong><ul><li>공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도</li></ul></li><li><strong>내용 결합도 (Content Coupling)</strong><ul><li>한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도</li></ul></li></ul></li></ul></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><strong>응집도 (Cohesion) [ 우 논 시 절 통 순 기 ]</strong><ul><li>응집도는 <strong>정보 은닉 개념을 확장한 것</strong>으로, 명령어나 호출문 등 모듈의 내부 요소들의 서로 관련되어 있는 정도, 즉 <strong>모듈이 독립적인 기능으로 정의되어 있는 정도를 의미</strong>합니다.</li><li><strong>응집도 약 → 강 ( 응집도가 약할 수록 품질 ↓ , 독립성 ↓)</strong></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><strong>우연적 응집도 (Coincidental Cohesion)</strong><ul><li>모듈 내부의 <strong>각 구성 요소들이 서로 관련 없는 요소로만 구성</strong>된 경우의 응집도</li></ul></li><li><strong>논리적 응집도 (Logical Cohesion)</strong><ul><li><strong>유사한 성격을 갖거나 특정 형태</strong>로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도</li></ul></li><li><strong>시간적 응집도 (Temporal Cohesion)</strong><ul><li><strong>특정 시간에 처리되는 몇 개의 기능</strong>을 모아 하나의 모듈로 작성할 경우의 응집도</li></ul></li><li><strong>절차적 응집도 (Procedural Cohesion)</strong><ul><li>모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 <strong>순차적으로 수행</strong>할 경우의 응집도</li></ul></li><li><strong>교환(통신)적 응집도 (Communication Cohesion)</strong><ul><li><strong>동일한 입력과 출력을 사용하여 서로 다른 기능을 수행</strong>하는 구성 요소들이 모였을 경우의 응집도</li></ul></li><li><strong>순차적 응집도 (Sequential Cohesion)</strong><ul><li>모듈 내 <strong>하나의 활동으로 부터 나온 출력 데이터를 그 다음 활동의 입력 데이터로 사용</strong>할 경우의 응집도</li></ul></li><li><strong>기능적 응집도 (Functional Cohesion)</strong><ul><li>모듈 내부의 <strong>모든 기능 요소들이 단일 문제와 연관되어 수행</strong>될 경우의 응집도</li></ul></li></ul></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><strong>팬인 (Fan-In) &#x2F; 팬아웃 (Fan-Out)</strong><ul><li><strong>팬인</strong> : 제어하는 모듈의 수 (화살표가 들어오는 개수)</li><li><strong>팬아웃</strong> : 제어되는 모듈의 수 (화살표가 나가는 개수)</li><li><strong>복잡도를 최적화 하려면 팬인 ↑,  팬아웃 ↓</strong></li></ul></li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li>소프트웨어 개발 보안의 개요<ul><li>개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동</li><li><strong>보안 요소 [ 부 인 무 기 가 ]</strong><ul><li>부인 방지, 인증, 무결성<ul><li>오직 인가 된 사용자만 수정</li></ul></li><li>기밀성<ul><li>인가 된 사용자 접근 허용, 노출되면 읽을 수 없음</li></ul></li><li>가용성<ul><li>인가 받은 사용자는 언제라도 사용 가능</li></ul></li></ul></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C/">자격증 참고 자료</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC-%EC%82%B0%EC%97%85%EA%B8%B0%EC%82%AC/">정보처리 산업기사</category>
      
      
      <comments>https://depra3.github.io/2023/07/29/2023/07/2%EA%B3%BC%EB%AA%A9-2%EC%9E%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정보처리 산업기사(2023) 2과목-1장-②</title>
      <link>https://depra3.github.io/2023/07/28/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A1/</link>
      <guid>https://depra3.github.io/2023/07/28/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A1/</guid>
      <pubDate>Fri, 28 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;제어문&quot;&gt;&lt;a href=&quot;#제어문&quot; class=&quot;headerlink&quot; title=&quot;제어문&quot;&gt;&lt;/a&gt;제어문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;명령어가 서술된 순서를 변경할 수 있음&lt;/li&gt;
&lt;li&gt;if문, 다중 if문, switch문, goto문, </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="제어문"><a href="#제어문" class="headerlink" title="제어문"></a>제어문</h1><ul><li>명령어가 서술된 순서를 변경할 수 있음</li><li>if문, 다중 if문, switch문, goto문, 반복문</li></ul><h1 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h1><ul><li><strong>프로그램 흐름에 원하는 기준을 조건으로 분기를 추가하여 흐름을 제어</strong></li><li>if 문 : <a href="https://depra3.github.io/2023/07/12/2023/07/JAVA-%EC%A1%B0%EA%B1%B4%EB%AC%B8-IF%EB%AC%B8/">JAVA - 조건문 - IF문</a></li><li>switch ~ case 문 : <a href="https://depra3.github.io/2023/07/14/2023/07/JAVA-%EC%A1%B0%EA%B1%B4%EB%AC%B8-Switch~Case%EB%AC%B8/">JAVA - 조건문 - Switch ~ Case문</a></li></ul><hr><h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li><strong>프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문</strong></li><li>while 문 : <a href="https://depra3.github.io/2023/07/15/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/">JAVA - 반복문 - while문</a></li><li>do ~ while 문 : <a href="https://depra3.github.io/2023/07/17/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/">JAVA - 반복문 - do ~ while문</a></li><li>for 문 : <a href="https://depra3.github.io/2023/07/18/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/">JAVA - 반복문 - for문</a></li></ul><hr><h1 id="goto-문"><a href="#goto-문" class="headerlink" title="goto 문"></a>goto 문</h1><ul><li>프로그램 실행 중 <strong>현재의 위치에서 원하는 다른 문장으로 이동</strong>하여 수행을 계속하기 위해 사용</li></ul><h3 id="사용-형식"><a href="#사용-형식" class="headerlink" title="사용 형식"></a>사용 형식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goto 레이블;</span><br><span class="line"></span><br><span class="line">레이블:</span><br><span class="line">실행문;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h1><ul><li>1차원 배열 : <a href="https://depra3.github.io/2023/07/20/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/">JAVA - 배열 - 1차원 배열</a></li><li>다차원 배열 : <a href="https://depra3.github.io/2023/07/24/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/">JAVA - 배열 - 다차원 배열</a></li></ul><hr><h1 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h1><ul><li><strong>프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간주소를 가리키는 변수</strong></li><li>C언어에서 사용</li></ul><h3 id="사용-예시"><a href="#사용-예시" class="headerlink" title="사용 예시"></a>사용 예시</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 포인터 변수 선언</span></span><br><span class="line">자료형 * 변수명;</span><br><span class="line">ex) <span class="type">int</span> *a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 포인터 주소값</span></span><br><span class="line">&amp;변수명;</span><br><span class="line">ex) b = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 포인터 변수값</span></span><br><span class="line">*변수명;</span><br><span class="line">ex) c = *a;</span><br></pre></td></tr></table></figure><h3 id="포인터와-배열"><a href="#포인터와-배열" class="headerlink" title="포인터와 배열"></a>포인터와 배열</h3><ul><li>배열 a 와 포인터변수 *a 비교</li></ul><table><thead><tr><th>a[0]</th><th>a[1]</th><th>a[2]</th><th>a[3]</th><th>a[4]</th></tr></thead><tbody><tr><td>*(a+0)</td><td>*(a+1)</td><td>*(a+2)</td><td>*(a+3)</td><td>*(a+4)</td></tr></tbody></table><hr><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h3 id="슬라이스-Slice"><a href="#슬라이스-Slice" class="headerlink" title="슬라이스(Slice)"></a>슬라이스(Slice)</h3><ul><li>문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라 반환하는 형식</li></ul><h3 id="사용-예시-①"><a href="#사용-예시-①" class="headerlink" title="사용 예시 ①"></a>사용 예시 ①</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start 인덱스에서 stop-1 인덱스까지 슬라이스</span></span><br><span class="line">객체명 [start : stop]</span><br><span class="line"></span><br><span class="line"><span class="comment"># start 인덱스에서 마지막까지 슬라이스</span></span><br><span class="line">객체명 [start : ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 처음부터 stop-1 인덱스까지 슬라이스</span></span><br><span class="line">객체명 [ : stop]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 처음부터 마지막 전체 반환</span></span><br><span class="line">객체명 [ : ]</span><br></pre></td></tr></table></figure><h3 id="사용-예시-②"><a href="#사용-예시-②" class="headerlink" title="사용 예시 ②"></a>사용 예시 ②</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start 인덱스에서 stop-1 인덱스까지 step값 만큼씩 점프하며 슬라이스</span></span><br><span class="line">객체명 [start : stop : step]</span><br><span class="line"></span><br><span class="line"><span class="comment"># start 인덱스에서 마지막까지 슬라이스</span></span><br><span class="line">객체명 [start : :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 처음부터 stop-1 인덱스까지 슬라이스</span></span><br><span class="line">객체명 [ : stop : ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 처음부터 마지막까지 step값 만큼씩 점프하며 슬라이스</span></span><br><span class="line">객체명 [ : : step]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 처음부터 마지막 전체 반환</span></span><br><span class="line">객체명 [ : : ]</span><br></pre></td></tr></table></figure><hr><h1 id="스크립트-언어의-종류"><a href="#스크립트-언어의-종류" class="headerlink" title="스크립트 언어의 종류"></a>스크립트 언어의 종류</h1><ul><li><strong>자바스크립트 (JAVA Script)</strong><ul><li>웹페이지 동작 제어, 클라이언트용 스크립트 언어, 객체 지향 프로그래밍 성격을 가짐</li></ul></li><li><strong>VB 스크립트</strong><ul><li>마이크로소프트 사의 애플리케이션 컨트롤</li></ul></li><li><strong>ASP</strong><ul><li>Windows 계열 수행 가능한 프로그래밍 언어</li></ul></li><li><strong>JSP</strong><ul><li>JAVA 서버용 스크립트</li></ul></li><li><strong>PHP</strong><ul><li>Linux, Unix, Windows 사용 가능, C, JAVA 문법 유사함</li></ul></li><li><strong>Python</strong><ul><li><strong>귀도 반로섬이</strong> 발표한 <strong>인터프리터 언어</strong>, 객체 지향 기능, 플랫폼 독립적, 문법 간단</li></ul></li><li><strong>쉘 스크립트</strong><ul><li><strong>Unix&#x2F;Linux 계열의 쉘</strong>에서 사용되는 명령어, 컴파일 단계가 없음, ‘.sh’ 붙음<ul><li>Bash Shell, Bourne Shell, C shell, Korn Shell 등<ul><li>선택형 : if, case</li><li>반복형 : for, while, until</li></ul></li></ul></li></ul></li><li><strong>Basic</strong><ul><li>절차 지향 기능 지원하는 대화형 인터프리터, 초보자도 쉽게 사용할 수 있는 문법 구조</li></ul></li></ul><hr><h1 id="라이브러리-개념"><a href="#라이브러리-개념" class="headerlink" title="라이브러리 개념"></a><strong>라이브러리 개념</strong></h1><ul><li><strong>프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체</strong><ul><li>도움말, 설치 파일, 샘플 코드 제공</li></ul></li><li><strong>모듈</strong> : 하나의 기능이 한 개의 파일을 구현된 상태</li><li><strong>패키지</strong> : 하나의 패키지 폴더 안에 여러 개의 모듈</li></ul><h2 id="C언어의-대표적인-표준-라이브러리"><a href="#C언어의-대표적인-표준-라이브러리" class="headerlink" title="C언어의 대표적인 표준 라이브러리"></a><strong>C언어의 대표적인 표준 라이브러리</strong></h2><ul><li><strong>#include &lt;stdio.h&gt;</strong></li><li><strong>stdio.h</strong> : 데이터의 입출력에 사용되는 기능 제공</li><li><strong>math.h</strong> : 수학 함수들 제공</li><li><strong>string.h</strong> : 문자열 처리에 사용되는 기능 제공</li><li><strong>stdlib.h</strong> : 자료형 변환, 난수 발생, 메모리 할당에 사용되는 기능을 제공</li><li><strong>time.h</strong> : 시간 처리에 사용되는 기능 제공</li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C/">자격증 참고 자료</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC-%EC%82%B0%EC%97%85%EA%B8%B0%EC%82%AC/">정보처리 산업기사</category>
      
      
      <comments>https://depra3.github.io/2023/07/28/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA-클래스, 인스턴스, 객체</title>
      <link>https://depra3.github.io/2023/07/26/2023/07/JAVA-%ED%81%B4%EB%9E%98%EC%8A%A4,%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4,%EA%B0%9D%EC%B2%B4/</link>
      <guid>https://depra3.github.io/2023/07/26/2023/07/JAVA-%ED%81%B4%EB%9E%98%EC%8A%A4,%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4,%EA%B0%9D%EC%B2%B4/</guid>
      <pubDate>Wed, 26 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;클래스&quot;&gt;&lt;a href=&quot;#클래스&quot; class=&quot;headerlink&quot; title=&quot;클래스&quot;&gt;&lt;/a&gt;클래스&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;객체를 만들어 내기 위한 &lt;strong&gt;일종의 설계도 혹는 틀&lt;/strong&gt;이다.&lt;ul&gt;
&lt;li&gt;&lt;stro</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><ul><li>객체를 만들어 내기 위한 <strong>일종의 설계도 혹는 틀</strong>이다.<ul><li><strong>와플(객체)</strong> 을 만들기 위한 <strong>와플팬(클래스)</strong> 이다.</li></ul></li><li>객체를 만들어 내기 위해 필요한 <strong>속성(변수)</strong> 과 <strong>동작(메서드)</strong> 으로 이루어져 있다.</li></ul><hr><h1 id="인스턴스"><a href="#인스턴스" class="headerlink" title="인스턴스"></a>인스턴스</h1><ul><li><strong>클래스(설계도 혹은 틀)를 바탕</strong>으로 <strong>소프트웨어 세계에 구현된 구체적인 실체</strong>이다.<ul><li><strong>와플팬(클래스)</strong> 을 통해 만들어낸 <strong>와플(객체) 하나하나를 해당 클래스의 인스턴스</strong>라고 한다.<ul><li><strong>와플(객체)</strong> 마다 딸기 와플, 바나나 와플 등으로 다르지만, 하나의 <strong>와플팬(클래스)</strong> 을 통해 만들어낸 경우 해당 <strong>클래스의 인스턴스</strong>인 것이다.</li></ul></li></ul></li></ul><hr><h1 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h1><ul><li><strong>클래스(설계도)로 구현한 모든 대상</strong>이다.</li><li><strong>인스턴스</strong>와 <strong>혼용해서 표현</strong>하기도 한다.</li><li><strong>참고 : <a href="https://depra3.github.io/2023/07/25/2023/07/JAVA-%EA%B0%9D%EC%B2%B4/">Depra3’s JAVA - 객체</a></strong></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/">클래스</category>
      
      <category domain="https://Depra3.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4/">인스턴스</category>
      
      
      <comments>https://depra3.github.io/2023/07/26/2023/07/JAVA-%ED%81%B4%EB%9E%98%EC%8A%A4,%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4,%EA%B0%9D%EC%B2%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA-객체</title>
      <link>https://depra3.github.io/2023/07/25/2023/07/JAVA-%EA%B0%9D%EC%B2%B4/</link>
      <guid>https://depra3.github.io/2023/07/25/2023/07/JAVA-%EA%B0%9D%EC%B2%B4/</guid>
      <pubDate>Tue, 25 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;객체-Object&quot;&gt;&lt;a href=&quot;#객체-Object&quot; class=&quot;headerlink&quot; title=&quot;객체 (Object)&quot;&gt;&lt;/a&gt;객체 (Object)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;물리적으로 존재&lt;/strong&gt;하거나 &lt;st</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체 (Object)"></a>객체 (Object)</h1><ul><li><strong>물리적으로 존재</strong>하거나 <strong>추상적으로 생각할 수 있는 것 중</strong>에서 <strong>자신과 다른 것을 식별 가능한 것</strong><ul><li><strong>물리적</strong><ul><li>사람, 책, 자동차, 컴퓨터 등</li></ul></li><li><strong>추상적</strong><ul><li>학과, 부서, 종류 등</li></ul></li></ul></li></ul><h1 id="객체의-구성"><a href="#객체의-구성" class="headerlink" title="객체의 구성"></a>객체의 구성</h1><ul><li><strong>속성(property)</strong><ul><li>자동차의 <strong>속성</strong> - 제조사, 모델, 색깔 등</li><li><strong>멤버 변수(member variable), 특성(attribute), 필드(field), 상태(state)</strong></li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><strong>기능(function)</strong><ul><li>자동차의 <strong>기능</strong> - 시동, 주행, 정지 등</li><li><strong>메서드(method), 함수(function), 행위(behavior)</strong></li></ul></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><strong>예시</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="comment">// 속성 - 멤버 변수</span></span><br><span class="line"><span class="keyword">public</span> String company;   <span class="comment">// 제조사</span></span><br><span class="line"><span class="keyword">public</span> String model;     <span class="comment">// 자동차 모델</span></span><br><span class="line"><span class="keyword">public</span> String color;     <span class="comment">// 자동차 색깔</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> maxSpeed;     <span class="comment">// 최고 속도</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> currentSpeed; <span class="comment">// 현재 속도</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 기능 - 메서드</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speedUp</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.currentSpeed = <span class="built_in">this</span>.currentSpeed + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">speedDown</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.currentSpeed--;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.currentSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrentSpeed</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.currentSpeed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%86%8D%EC%84%B1/">객체의 속성</category>
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B8%B0%EB%8A%A5/">객체의 기능</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%A9%94%EC%84%9C%EB%93%9C/">메서드</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%A9%A4%EB%B2%84-%EB%B3%80%EC%88%98/">멤버 변수</category>
      
      <category domain="https://Depra3.github.io/tags/%ED%95%84%EB%93%9C/">필드</category>
      
      
      <comments>https://depra3.github.io/2023/07/25/2023/07/JAVA-%EA%B0%9D%EC%B2%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 배열 - ② 다차원 배열</title>
      <link>https://depra3.github.io/2023/07/24/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/</link>
      <guid>https://depra3.github.io/2023/07/24/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/</guid>
      <pubDate>Mon, 24 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;배열-정의&quot;&gt;&lt;a href=&quot;#배열-정의&quot; class=&quot;headerlink&quot; title=&quot;배열 정의&quot;&gt;&lt;/a&gt;배열 정의&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동일한 데이터 타입의 여러 데이터를 하나의 묶음으로 다루는 것&lt;/strong&gt;이</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="배열-정의"><a href="#배열-정의" class="headerlink" title="배열 정의"></a>배열 정의</h1><ul><li><strong>동일한 데이터 타입의 여러 데이터를 하나의 묶음으로 다루는 것</strong>이다.</li></ul><h1 id="다차원-배열"><a href="#다차원-배열" class="headerlink" title="다차원 배열"></a>다차원 배열</h1><ul><li><p><strong>배열 요소로 또 다른 배열을 가진 배열</strong>이다.</p></li><li><p><strong>ex) 2차원 배열</strong></p><table><thead><tr><th>a[0][0]</th><th>a[0][1]</th><th>a[0][2]</th><th>a[0][3]</th><th>…</th></tr></thead><tbody><tr><td>a[1][0]</td><td>a[1][1]</td><td>a[1][2]</td><td>a[1][3]</td><td>…</td></tr><tr><td>a[2][0]</td><td>a[2][1]</td><td>a[2][2]</td><td>a[2][3]</td><td>…</td></tr></tbody></table></li></ul><h1 id="배열-선언-형식"><a href="#배열-선언-형식" class="headerlink" title="배열 선언 형식"></a>배열 선언 형식</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①</span></span><br><span class="line">데이터타입[][] 변수명 = <span class="keyword">new</span> 데이터타입[길이][길이];</span><br><span class="line">데이터타입[] 변수명[] = <span class="keyword">new</span> 데이터타입[길이][길이];</span><br><span class="line">데이터타입 변수명[][] = <span class="keyword">new</span> 데이터타입[길이][길이];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②</span></span><br><span class="line">데이터타입[][] 변수명;</span><br><span class="line">변수명 = <span class="keyword">new</span> 데이터타입[][] &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br><span class="line">데이터타입[] 변수명[];</span><br><span class="line">변수명 = <span class="keyword">new</span> 데이터타입[][] &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br><span class="line">데이터타입 변수명[][];</span><br><span class="line">변수명 = <span class="keyword">new</span> 데이터타입[][] &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③</span></span><br><span class="line">데이터타입[][] 변수명 = &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br><span class="line">데이터타입[] 변수명[] = &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br><span class="line">데이터타입 변수명[][] = &#123; &#123;변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;, &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, .... &#125; &#125;;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방식 ①</span></span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">double</span>[] aa[] = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">String aaa[][] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ②</span></span><br><span class="line"><span class="type">int</span>[][] b;</span><br><span class="line">b = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">double</span>[] bb[];</span><br><span class="line">bb = <span class="keyword">new</span> <span class="title class_">double</span>[][] &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">String bbb[][];</span><br><span class="line">bbb = <span class="keyword">new</span> <span class="title class_">String</span>[][] &#123;</span><br><span class="line">&#123; <span class="string">&quot;일&quot;</span>, <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>&#125;,</span><br><span class="line">&#123; <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>, <span class="string">&quot;오&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ③</span></span><br><span class="line"><span class="type">int</span>[][] c = &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">double</span>[][] cc = &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">String ccc[][] = &#123;</span><br><span class="line">&#123; <span class="string">&quot;일&quot;</span>, <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>&#125;,</span><br><span class="line">&#123; <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>, <span class="string">&quot;오&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>출력</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방식 ① Arrays 클래스 사용</span></span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(b[<span class="number">0</span>]));</span><br><span class="line">System.out.println(Arrays.toString(bb[<span class="number">0</span>]));</span><br><span class="line">System.out.println(Arrays.toString(bbb[<span class="number">0</span>]));</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ② 반복문 for 문 사용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; c[i].length; j++) &#123;</span><br><span class="line">System.out.print(c[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">System.out.print(cc[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">System.out.print(ccc[i][j]);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ③ 반복문 foreach 문 사용</span></span><br><span class="line"><span class="keyword">for</span> (String[] str : ccc) &#123;</span><br><span class="line"><span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/Untitled.png"></p></li></ul><hr><h1 id="주의할-점"><a href="#주의할-점" class="headerlink" title="주의할 점"></a>주의할 점</h1><ul><li><strong>배열 요소에 배열이 있기 때문에, 1차원 배열처럼 출력하면 배열 주소가 출력</strong>된다.</li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(b));</span><br></pre></td></tr></table></figure></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/Untitled%201.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%B0%EC%97%B4/">배열</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%8B%A4%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4/">다차원 배열</category>
      
      
      <comments>https://depra3.github.io/2023/07/24/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정보처리 산업기사(2023) 2과목-1장-①</title>
      <link>https://depra3.github.io/2023/07/22/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/</link>
      <guid>https://depra3.github.io/2023/07/22/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/</guid>
      <pubDate>Sat, 22 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;프로그래밍-언어-활용&quot;&gt;&lt;a href=&quot;#프로그래밍-언어-활용&quot; class=&quot;headerlink&quot; title=&quot;프로그래밍 언어 활용&quot;&gt;&lt;/a&gt;프로그래밍 언어 활용&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;변수, 연산자 scanf, printf, if, f</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="프로그래밍-언어-활용"><a href="#프로그래밍-언어-활용" class="headerlink" title="프로그래밍 언어 활용"></a>프로그래밍 언어 활용</h1><ul><li>변수, 연산자 scanf, printf, if, for, while, do~while, 배열, 슬라이스(slice)</li><li>정수 타입 - 소수점이 없음 &#x2F; 1, -1, 10, -100</li><li>부동 소수점 타입 - 소수점 이하가 있는 실수</li><li>문자 타입 - 한 문자를 저장할 때, (’ ’) 작은 따옴표 표시</li><li>문자열 타입 - (” ”) 큰 따옴표 표시</li><li>불린 타입 - 참, 거짓 판단 default는 False</li><li>배열 타입 - 같은 타입의 데이터의 집합, {} 중괄호 안에 ‘,’ 콤마로 구분하여 값을 나열</li></ul><h3 id="언어별-데이터-타입"><a href="#언어별-데이터-타입" class="headerlink" title="언어별 데이터 타입"></a>언어별 데이터 타입</h3><ul><li><p><strong>C &#x2F; C++</strong></p><p>  <img src="/Images/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled.png"></p></li><li><p><strong>JAVA</strong></p><p>  <img src="/Images/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%201.png"></p></li><li><p><strong>Python</strong></p><p>  <img src="/Images/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%202.png"></p></li></ul><h3 id="변수명-작성-규칙"><a href="#변수명-작성-규칙" class="headerlink" title="변수명 작성 규칙"></a>변수명 작성 규칙</h3><ul><li><p>영문자, 숫자, _ (under bar)를 사용할 수 있음</p></li><li><p>첫 글자는 영문자나 _ (under bar), 숫자 안됨</p></li><li><p>글자 수에 제한 없음</p></li><li><p>대 소문자 구분함, 끝에는 반드시 세미콜론(;)</p></li><li><p>예약어를 변수명으로 사용 불가</p></li><li><p>데이터 타입을 명시하는 것을 헝가리안 표시법</p><p>  <img src="/Images/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%203.png"></p></li><li><p>산술 연산자 : +, -, *, &#x2F;, %, ++ (증감 연산자), – (감소 연산자)</p></li><li><p>관계 연산자 : &#x3D;&#x3D;, !&#x3D;&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;</p></li><li><p>비트 연산자</p><ul><li>&amp; (AND), | (OR) , ^ (XOR), ~ (NOT&#x2F; 단항 연산자로서 모든 비트 반전)</li><li>&lt;&lt; ( 비트를 왼쪽 한 칸 이동 &#x2F; 2배 ), &gt;&gt; ( 비트를 오른쪽 한 칸 이동 &#x2F; 2 나누기의 몫 )</li></ul></li><li><p>논리 연산자 : ! (NOT), &amp;&amp; (AND), || (OR)</p></li><li><p>대입 연산자 : +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;, &lt;&lt;&#x3D;, &gt;&gt;&#x3D;</p></li><li><p>조건 연산자 : 조건? 수식 1 : 수식 2</p><ul><li>참이면 수식 1, 거짓이면 수식 2</li></ul></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><strong>연산자 우선 순위 [ 단산시 관비 논조대 ]</strong><ul><li>단항 : !, ++, –, ~</li><li>산술 : *, &#x2F;, %, +, -</li><li>시프트 : &gt;&gt;, &lt;&lt;</li><li>관계 : &lt;, &lt;&#x3D;, &gt;&#x3D;, &gt;, &#x3D;&#x3D;, !&#x3D;</li><li>비트 : &amp;, ^, |</li><li>논리 : &amp;&amp;, ||</li><li>조건 : □ ? 1 : 2</li><li>대입 : &#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;, &lt;&lt;&#x3D;, &gt;&gt;&#x3D;</li></ul></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li>데이터 입출력<ul><li>키보드로 입력 받아 화면으로 출력할 때 사용하는 함수<ul><li>scanf(), getchar(), gets(), printf(), putchar(), puts()</li></ul></li><li>scanf() 함수 : 변수를 저장하는 함수<ul><li>scanf(서식 문자열, 변수의 주소)<ul><li>서식 문자열<ul><li>%d(10진수 정수), %o(8진수 정수), %x(16진수), %c(문자), %s(문자열), %f(소수점 포함 실수)</li></ul></li><li>변수의 주소<ul><li>&amp;를 붙인다.</li></ul></li><li>서식 문자열 앞에는 숫자를 적으면 자릿수가 확보</li></ul></li></ul></li><li>printf() 함수 : 주어진 값을 화면에 출력하는 함수, 숫자 없는 기본 자릿수 6개<ul><li>printf(서식 문자열, 변수)</li></ul></li><li>제어 문자<ul><li><p>NULL 문자 출력 : \0</p><p>  <img src="/Images/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/Untitled%204.png"></p></li></ul></li></ul></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li>JAVA 표준 출력<ul><li>System.out.print() ( f, ln, … )</li></ul></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li>기타 표준 입출력 함수<ul><li>입력<ul><li>getchar() : 키보드로 한 문자를 입력 받아 변수에 저장</li><li>gets() : 문자열로 인식 저장</li></ul></li><li>출력<ul><li>putchar() : 한 문자를 화면에 출력</li><li>puts() : 문자열을 출력한 후 다음 줄로 이동</li></ul></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C/">자격증 참고 자료</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC-%EC%82%B0%EC%97%85%EA%B8%B0%EC%82%AC/">정보처리 산업기사</category>
      
      
      <comments>https://depra3.github.io/2023/07/22/2023/07/2%EA%B3%BC%EB%AA%A9-1%EC%9E%A5-%E2%91%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 반복문 - foreach 문</title>
      <link>https://depra3.github.io/2023/07/21/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-foreach%EB%AC%B8/</link>
      <guid>https://depra3.github.io/2023/07/21/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-foreach%EB%AC%B8/</guid>
      <pubDate>Fri, 21 Jul 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;반복문&quot;&gt;&lt;a href=&quot;#반복문&quot; class=&quot;headerlink&quot; title=&quot;반복문&quot;&gt;&lt;/a&gt;반복문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문&lt;/strong&gt;이다.&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li><strong>프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문</strong>이다.</li><li><strong>종류 : while 문, do ~ while 문, for 문, foreach 문</strong></li></ul><h1 id="foreach-문"><a href="#foreach-문" class="headerlink" title="foreach 문"></a>foreach 문</h1><ul><li><strong>자바 1.5버전부터 foreach 기능 추가</strong></li><li><strong>초기값, 리스트 or 배열를 앞에 정의하여 사용하는 반복문</strong>이다.</li><li><strong>리스트 목록을 받아 리스트 목록 개수만큼 반복문 안의 실행문을 실행</strong>한다.</li></ul><h2 id="사용-형식"><a href="#사용-형식" class="headerlink" title="사용 형식"></a>사용 형식</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">데이터 타입[] 변수명 ① = &#123; ... &#125;;</span><br><span class="line"><span class="keyword">for</span> ( 데이터타입 변수명 ②: 변수명 ①) &#123;</span><br><span class="line">System.out.println(변수명 ②);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] a = &#123; <span class="string">&quot;일&quot;</span>, <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String str : a) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-foreach%EB%AC%B8/Untitled.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%98%EB%B3%B5%EB%AC%B8/">반복문</category>
      
      <category domain="https://Depra3.github.io/tags/foreach%EB%AC%B8/">foreach문</category>
      
      
      <comments>https://depra3.github.io/2023/07/21/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-foreach%EB%AC%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 배열 - ① 1차원 배열</title>
      <link>https://depra3.github.io/2023/07/20/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/</link>
      <guid>https://depra3.github.io/2023/07/20/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/</guid>
      <pubDate>Thu, 20 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;배열-정의&quot;&gt;&lt;a href=&quot;#배열-정의&quot; class=&quot;headerlink&quot; title=&quot;배열 정의&quot;&gt;&lt;/a&gt;배열 정의&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동일한 데이터 타입의 여러 데이터를 하나의 묶음으로 다루는 것&lt;/strong&gt;이</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="배열-정의"><a href="#배열-정의" class="headerlink" title="배열 정의"></a>배열 정의</h1><ul><li><strong>동일한 데이터 타입의 여러 데이터를 하나의 묶음으로 다루는 것</strong>이다.</li></ul><h1 id="1-차원-배열"><a href="#1-차원-배열" class="headerlink" title="1 차원 배열"></a>1 차원 배열</h1><ul><li><strong>선형 구조로 이루어진 묶음</strong>이다.</li></ul><table><thead><tr><th>a[0]</th><th>a[1]</th><th>a[2]</th><th>…</th></tr></thead><tbody><tr><td>일</td><td>이</td><td>삼</td><td>…</td></tr></tbody></table><h1 id="배열-선언-형식"><a href="#배열-선언-형식" class="headerlink" title="배열 선언 형식"></a>배열 선언 형식</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①</span></span><br><span class="line">데이터타입[] 변수명 = <span class="keyword">new</span> 데이터타입[길이];</span><br><span class="line">데이터타입 변수명[] = <span class="keyword">new</span> 데이터타입[길이];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②</span></span><br><span class="line">데이터타입[] 변수명;</span><br><span class="line">변수명 = <span class="keyword">new</span> 데이터타입[] &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;;</span><br><span class="line">데이터타입 변수명[];</span><br><span class="line">변수명 = <span class="keyword">new</span> 데이터타입[] &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③</span></span><br><span class="line">데이터타입[] 변수명 = &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;;</span><br><span class="line">데이터타입 변수명[] = &#123; 변수<span class="number">1</span>, 변수<span class="number">2</span>, ....&#125;;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방식 ①</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">String aa[] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ②</span></span><br><span class="line"><span class="type">int</span>[] b;</span><br><span class="line">b = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">String bb[];</span><br><span class="line">bb = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;일&quot;</span>, <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>, <span class="string">&quot;오&quot;</span>, <span class="string">&quot;육&quot;</span>, <span class="string">&quot;칠&quot;</span>, <span class="string">&quot;팔&quot;</span>, <span class="string">&quot;구&quot;</span>, <span class="string">&quot;십&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ③</span></span><br><span class="line"><span class="type">int</span>[] c = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">String cc[] = &#123;<span class="string">&quot;일&quot;</span>, <span class="string">&quot;이&quot;</span>, <span class="string">&quot;삼&quot;</span>, <span class="string">&quot;사&quot;</span>, <span class="string">&quot;오&quot;</span>, <span class="string">&quot;육&quot;</span>, <span class="string">&quot;칠&quot;</span>, <span class="string">&quot;팔&quot;</span>, <span class="string">&quot;구&quot;</span>, <span class="string">&quot;십&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>출력</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방식 ① Arrays 클래스 사용</span></span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line">System.out.println(Arrays.toString(bb));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ② 반복문 for 문 사용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">System.out.println(c[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방식 ③ 반복문 foreach 문 사용</span></span><br><span class="line"><span class="keyword">for</span> (String arr : cc) &#123;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>방식 ③ 참고 : <a href="https://depra3.github.io/2023/07/21/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-foreach%EB%AC%B8/">foreach 문</a></li></ul></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/Untitled.png"></p></li></ul><hr><h1 id="주의할-점"><a href="#주의할-점" class="headerlink" title="주의할 점"></a>주의할 점</h1><h2 id="선언-시-주의할-점"><a href="#선언-시-주의할-점" class="headerlink" title="선언 시 주의할 점"></a>선언 시 주의할 점</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error 발생 X</span></span><br><span class="line"><span class="type">int</span>[] c = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error 발생 O</span></span><br><span class="line"><span class="type">int</span>[] d;</span><br><span class="line">d = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>배열 c에서는 Error가 발생하지 않는다. 그러나 <strong>배열 d와 같이 2 줄로 정의하면 컴파일 Error가 발생</strong>한다.</p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/Untitled%201.png"></p></li></ul><h2 id="출력-시-주의할-점"><a href="#출력-시-주의할-점" class="headerlink" title="출력 시 주의할 점"></a>출력 시 주의할 점</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 배열 내용 출력</span></span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line">System.out.println(Arrays.toString(bb));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 주소 출력</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(cc);</span><br></pre></td></tr></table></figure><ul><li><p><strong>Arrays 클래스, 반복문을 이용하지 않고 그대로 변수명을 이용하여 출력하면 배열의 주소가 출력</strong>이 된다.</p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/Untitled%202.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%B0%EC%97%B4/">배열</category>
      
      <category domain="https://Depra3.github.io/tags/1%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4/">1차원 배열</category>
      
      
      <comments>https://depra3.github.io/2023/07/20/2023/07/JAVA-%EB%B0%B0%EC%97%B4-%E2%91%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 반복문 - for 문</title>
      <link>https://depra3.github.io/2023/07/18/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/</link>
      <guid>https://depra3.github.io/2023/07/18/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/</guid>
      <pubDate>Tue, 18 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;반복문&quot;&gt;&lt;a href=&quot;#반복문&quot; class=&quot;headerlink&quot; title=&quot;반복문&quot;&gt;&lt;/a&gt;반복문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문&lt;/strong&gt;이다.&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li><strong>프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문</strong>이다.</li><li><strong>종류 : while 문, do ~ while 문, for 문, foreach 문</strong></li></ul><h1 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h1><ul><li><strong>초기값, 조건식, 증감식을 앞에 정의하여 한 눈에 보기 쉬운 형식의 반복문</strong>이다.</li><li><strong>초기값에서 증감식 ( ++ &#x2F; – 등 ) 에 따라 조건식이 참인 경우 반복문 안의 실행문을 실행</strong>한다.</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="사용-형식"><a href="#사용-형식" class="headerlink" title="사용 형식"></a>사용 형식</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(초기값; 조건식; 증감식) &#123;</span><br><span class="line">실행문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>앞선 반복문(while, do ~ while)과 같이 실행문이 한 줄인 경우, 블록 기호 { } 생략 가능</strong>하다.</li><li><strong>참고 : <a href="https://depra3.github.io/2023/07/17/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/">depra3’s 반복문 - do~while문</a></strong></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/Untitled.png"></p></li></ul><hr><h1 id="중첩-for-문"><a href="#중첩-for-문" class="headerlink" title="중첩 for 문"></a>중첩 for 문</h1><ul><li><strong>for 문을 중첩해서 사용</strong>할 수 있다.</li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h2 id="사용-형식-1"><a href="#사용-형식-1" class="headerlink" title="사용 형식"></a>사용 형식</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(초기값; 조건식; 증감식) &#123;</span><br><span class="line">실행문;</span><br><span class="line"><span class="keyword">for</span>(초기값; 조건식; 증감식) &#123;</span><br><span class="line">실행문;</span><br><span class="line">&#125;</span><br><span class="line">실행문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>원하는 만큼 중첩해서 사용</strong>할 수 있다.</li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/Untitled%201.png"></p><ul><li><p><strong>for (int j &#x3D; 0; j &lt; i; j++)</strong> 에서 <strong>j &lt; i</strong> 를 <strong>j &lt; 11 - i 로 변경하면 역으로 나열</strong>된다.</p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/Untitled%202.png"></p></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%98%EB%B3%B5%EB%AC%B8/">반복문</category>
      
      <category domain="https://Depra3.github.io/tags/For%EB%AC%B8/">For문</category>
      
      
      <comments>https://depra3.github.io/2023/07/18/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-for%EB%AC%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA - 반복문 - do ~ while 문</title>
      <link>https://depra3.github.io/2023/07/17/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/</link>
      <guid>https://depra3.github.io/2023/07/17/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/</guid>
      <pubDate>Mon, 17 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;반복문&quot;&gt;&lt;a href=&quot;#반복문&quot; class=&quot;headerlink&quot; title=&quot;반복문&quot;&gt;&lt;/a&gt;반복문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문&lt;/strong&gt;이다.&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li><strong>프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문</strong>이다.</li><li><strong>종류 : while 문, do ~ while 문, for 문, foreach 문</strong></li></ul><h1 id="do-while-문"><a href="#do-while-문" class="headerlink" title="do ~ while 문"></a>do ~ while 문</h1><ul><li><strong>do ~ whilie 문은 { } 안의 실행문을 무조건 한번 실행한 후 조건식에서 참(true) &#x2F;</strong><br>  <strong>거짓(false)을 가려 참(true)인 경우 반복문을 실행하고 거짓(false)인 경우 반복문을 종료한다.</strong></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="사용-형식-①"><a href="#사용-형식-①" class="headerlink" title="사용 형식 ①"></a>사용 형식 ①</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">실행문;</span><br><span class="line">&#125; <span class="keyword">while</span> (조건식)</span><br><span class="line"><span class="comment">// 조건식이 참인 경우 반복문 실행, 거짓인 경우 반복문 실행하지 않음.</span></span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">a++;</span><br><span class="line">&#125; <span class="keyword">while</span> (a==<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">b++;</span><br><span class="line">&#125; <span class="keyword">while</span> (b &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/Untitled.png"></p></li></ul><hr><h2 id="사용-형식-②"><a href="#사용-형식-②" class="headerlink" title="사용 형식 ②"></a>사용 형식 ②</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">실행문;</span><br><span class="line"><span class="keyword">while</span> (조건식)</span><br><span class="line"><span class="comment">// 조건식이 참인 경우 반복문 실행, 거짓인 경우 반복문 실행하지 않음.</span></span><br></pre></td></tr></table></figure><ul><li><strong>실행문이 한 줄인 경우, 블록 기호 { } 를 생략</strong>할 수 있다.</li><li><code>실제로 사용하는 것을 본 적 없다.</code></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a++);</span><br><span class="line"><span class="keyword">while</span> (a==<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 한 줄로 사용할 수도 있다.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> System.out.println(<span class="string">&quot;b = &quot;</span> + b++); <span class="keyword">while</span> (b &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/Untitled%201.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%98%EB%B3%B5%EB%AC%B8/">반복문</category>
      
      <category domain="https://Depra3.github.io/tags/do-while%EB%AC%B8/">do~while문</category>
      
      
      <comments>https://depra3.github.io/2023/07/17/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-do~while%EB%AC%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA-반복문-while문</title>
      <link>https://depra3.github.io/2023/07/15/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/</link>
      <guid>https://depra3.github.io/2023/07/15/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/</guid>
      <pubDate>Sat, 15 Jul 2023 12:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;반복문&quot;&gt;&lt;a href=&quot;#반복문&quot; class=&quot;headerlink&quot; title=&quot;반복문&quot;&gt;&lt;/a&gt;반복문&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문&lt;/strong&gt;이다.&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h1><ul><li><strong>프로그램 흐름에서 일정 횟수를 반복하고 싶은 구간에 사용하는 제어문</strong>이다.</li><li><strong>종류 : while 문, do ~ while 문, for 문, foreach 문</strong></li></ul><h1 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h1><ul><li><strong>while 문은 조건식이 참(true) 인 경우에 동작하는 반복문</strong>이며, <strong>거짓(false)이라면 반복하지 않고 while 문에서 빠져나와 그 다음 코드를 실행</strong>한다.</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="사용-형식-①"><a href="#사용-형식-①" class="headerlink" title="사용 형식 ①"></a>사용 형식 ①</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건식)&#123;</span><br><span class="line">실행문;</span><br><span class="line">실행문;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>실행문이 두 줄 이상인 경우, 블록 기호 { } 를 생략</strong>할 수 없다.</li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (a &lt;= <span class="number">10</span>) &#123; </span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/Untitled.png"></p></li></ul><hr><h2 id="사용-형식-②"><a href="#사용-형식-②" class="headerlink" title="사용 형식 ②"></a>사용 형식 ②</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(조건식)</span><br><span class="line">실행문;</span><br></pre></td></tr></table></figure><ul><li><strong>실행문이 한 줄인 경우, 블록 기호 { } 를 생략</strong>할 수 있다.</li><li><strong>실행문이 두 줄인 경우, 첫 줄만 반복</strong>한다.</li><li><code>사용 빈도가 매우 낮다.</code></li></ul><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><ul><li><p><strong>예시</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b &lt;= <span class="number">10</span>)</span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b++);</span><br></pre></td></tr></table></figure></li></ul><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><ul><li><p><strong>결과</strong></p><p>  <img src="/Images/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/Untitled%201.png"></p></li></ul>]]></content:encoded>
      
      
      <category domain="https://Depra3.github.io/categories/JAVA/">JAVA</category>
      
      
      <category domain="https://Depra3.github.io/tags/%EA%B0%9C%EB%85%90/">개념</category>
      
      <category domain="https://Depra3.github.io/tags/%EB%B0%98%EB%B3%B5%EB%AC%B8/">반복문</category>
      
      <category domain="https://Depra3.github.io/tags/while%EB%AC%B8/">while문</category>
      
      
      <comments>https://depra3.github.io/2023/07/15/2023/07/JAVA-%EB%B0%98%EB%B3%B5%EB%AC%B8-while%EB%AC%B8/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
